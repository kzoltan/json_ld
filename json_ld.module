<?php
/**
 * @file
 * Module file for the JSON-LD.
 */

/**
 * Implements hook_permission().
 */
function json_ld_permission() {
  return array(
    'configure jsonld' => array(
      'title' => t('Configure JSON-LD'),
      'description' => t('Configure JSON-LD Settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function json_ld_menu() {
  $items = array();

  $items['admin/config/search/json-ld'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'JSON-LD',
    'description' => 'Adds JSON-LD to a site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('json_ld_settings_form'),
    'access arguments' => array('configure jsonld'),
    'weight' => 10,
    'file' => 'includes/json_ld.admin.inc',
  );

  return $items;
}

/**
 * Implements template_preprocess_html().
 */
function json_ld_preprocess_html(&$vars) {
  // Base vars.
  $jsonld = array();
  $jsonld['@context'] = 'http://schema.org';

  // Check Current Node.
  $node = menu_get_object();
  if (isset($node)) {
    $jsonld += json_ld_output_node($node);
    $key = $node->title;
  }
  // Basic Default Types.
  else {
    $jsonld += json_ld_output_default();
    $key = 'default';
  }

  json_ld_add_script($jsonld, $key);
}

/**
 * Implements hook_views_pre_render().
 */
function json_ld_views_pre_render(&$view) {
  // If this view is good to go.
  if (variable_get('json_ld_view_' . $view->name . '_' . $view->current_display, FALSE)) {
    // Go through the view on the page.
    foreach ($view->result as $result) {
      if (isset($result->nid)) {
        $nodez[] = $result->nid;
      }
    }

    // Add output to the nodes.
    if (isset($nodez)) {
      $nodes = node_load_multiple($nodez);
      foreach ($nodes as $node) {
        json_ld_add_output($node);
      }
    }
  }
}

/**
 * Output JSON-LD for a node.
 *
 * @param  object $node
 *   The node object.
 *
 * @return array
 *   The array to use for JSON-LD.
 */
function json_ld_output_node($node) {
  global $base_url;

  // Grab the variables.
  $json_vars = array();
  $query = db_query("SELECT * FROM {variable} WHERE name LIKE 'json_ld_%'");
  foreach ($query->fetchAll() as $result) {
    $json_vars[$result->name] = unserialize($result->value);
  }

  // Grab the default vars to use.
  $logo = json_ld_get_logo();
  $default_image = json_ld_get_large_image();
  $sitename = variable_get('json_ld_site_name', 'site_name');

  // Check if the Current node type matches our vars.
  foreach ($json_vars as $name => $value) {
    $check = str_replace('json_ld_node_type_', '', $name);
    if ($node->type == $check && $value) {
      $data['@type'] = variable_get('json_ld_schema_' . $node->type, 'Article');
      $content = variable_get('json_ld_content_' . $node->type, '');
      $image = variable_get('json_ld_image_' . $node->type, '');
    }
  }

  // Main Entity Page Stuff.
  $path = drupal_get_path_alias(current_path());
  $data['mainEntityOfPage'] = array(
    '@type' => 'WebPage',
    '@id' => $base_url . '/' . $path,
  );

  // Title win.
  $data['headline'] = $node->title;

  // Content Image Winz.
  if (!empty($image)) {
    $field = field_get_items('node', $node, $image);
    if (!empty($field)) {
      // If multiple, just grab the first and do it.
      if (isset($field[0])) {
        $data['image'] = array(
          '@type' => 'ImageObject',
          'url' => file_create_url($field[0]['uri']),
          'height' => $field[0]['height'],
          'width' => $field[0]['width'],
        );
      }
      else {
        $data['image'] = array(
          '@type' => 'ImageObject',
          'url' => file_create_url($field['uri']),
          'height' => $field['height'],
          'width' => $field['width'],
        );
      }
    }
    else {
      // Default image FTW.
      $data['image'] = $default_image;
    }
  }
  else {
    // Default image FTW.
    $data['image'] = $default_image;
  }

  // Date wins.
  $data['datePublished'] = date('c', $node->created);
  $data['dateModified'] = date('c', $node->changed);

  // Author wins
  $author = user_load($node->uid);
  $data['author'] = array(
    '@type' => 'Person',
    'name' => $author->name,
  );

  // Org publishing trill.
  $data['publisher'] = array(
    '@type' => 'Organization',
    'name' => $sitename,
    'logo' => $logo,
  );

  // Set the description.
  if (!empty($content)) {
    $field = field_view_field('node', $node, $content, array('label'=>'hidden'));
    $field = render($field);
    // Clean up the string so it is just text.
    $field = str_replace(PHP_EOL, '', $field);
    $field = trim(preg_replace('/\t+/', '', $field));
    $data['description'] = strip_tags($field);
  }
  else {
    $data['description'] = variable_get('json_ld_site_desc', '');
  }

  // Alter data if need be.
  // See hook_json_ld_output_node_alter() in the API documentation.
  drupal_alter('json_ld_output_node', $data);


  return $data;
}

/**
 * Output JSON-LD for default types..
 *
 * @return array
 *   The array to use for JSON-LD.
 */
function json_ld_output_default() {
  global $base_url;

  // Grab the default vars to use.
  $logo = json_ld_get_logo();
  $sitename = variable_get('json_ld_site_name', 'site_name');
  $desc = variable_get('json_ld_site_desc', '');

  // Set the type and address stuffs for general pages.
  $data['@type'] = variable_get('json_ld_business_type', 'Organization');
  $data['address'] = array(
    'streetAddress' => variable_get('json_ld_address', ''),
    'addressLocality' => variable_get('json_ld_city', ''),
    'addressRegion' => variable_get('json_ld_state', ''),
    'postalCode' => variable_get('json_ld_zip', ''),
  );
  $data['telephone'] = variable_get('json_ld_phone', '');

  // Throw in the logo from above.
  $json['logo'] = $logo;

  // Site Name.
  $data['name'] = $sitename;

  // Add urls
  $head_elements = drupal_add_html_head();
  if (!empty($head_elements['metatag_canonical'])) {
    $data['url'] = $head_elements['metatag_canonical']['#value'];
  }
  else {
    $path = drupal_get_path_alias(current_path());
    $data['url'] = $base_url . '/' . $path;
  }

  // Set the site description.
  $data['description'] = $desc;

  // Alter data if need be.
  // See hook_json_ld_output_default_alter() in the API documentation.
  drupal_alter('json_ld_output_default', $data);

  return $data;
}

/**
 * Gets the default logo.
 *
 * @return array|NULL
 *   Returns the JSON-LD array or NULL.
 */
function json_ld_get_logo() {
  // Load up logo to use later.
  $fid = variable_get('json_ld_site_logo_small', '');
  if (!empty($fid)) {
    $file = file_load($fid);
    // Set the logo array to use later.
    return array(
      '@type' => 'ImageObject',
      'url' => file_create_url($file->uri),
      'height' => $file->height,
      'width' => $file->width,
    );
  }
  return NULL;
}

/**
 * Gets the default large image.
 *
 * @return array|NULL
 *   Returns the JSON-LD array or NULL.
 */
function json_ld_get_large_image() {
  // Load up logo to use later.
  $fid = variable_get('json_ld_site_logo_large', '');
  if (!empty($fid)) {
    $file = file_load($fid);
    // Set the logo array to use later.
    return array(
      '@type' => 'ImageObject',
      'url' => file_create_url($file->uri),
      'height' => $file->height,
      'width' => $file->width,
    );
  }
  return NULL;
}

/**
 * Adds the script to the head.
 *
 * @param  array $jsonld
 *   The JSON-LD data array.
 *
 * @param  array $key
 *   Key string so we can add multiple if need be.
 */
function json_ld_add_script($jsonld, $key) {
  // Set the script array.
  $json_ld_script = array(
    '#tag' => 'script',
    '#attributes' => array('type' => 'application/ld+json'),
    '#value' => defined('JSON_UNESCAPED_SLASHES') ? json_encode($jsonld, JSON_UNESCAPED_SLASHES) : json_encode($jsonld),
  );
  // Set this thing.
  drupal_add_html_head($json_ld_script, 'json_ld_' . $key);
}


/**
 * Public function that adds JSON-LD Output for a node.
 *
 * @param object $node
 *   The node object.
 *
 * @param array|NULL $data
 *   Additional data that may be added to the output.
 */
function json_ld_add_output($node, $data = NULL) {
  // Set the base vars.
  $jsonld = array();
  $jsonld['@context'] = 'http://schema.org';
  // Add our stuff.
  $jsonld += json_ld_output_node($node);
  // Add your stuff
  if (isset($data) && is_array($data)) {
    $jsonld += $data;
  }
  // Set this thing.
  json_ld_add_script($jsonld, 'add_' . $node->title);
}
